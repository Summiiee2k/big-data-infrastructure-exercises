from datetime import datetime
from typing import List, Optional

import psycopg2
from fastapi import APIRouter, status
from psycopg2.extras import RealDictCursor
from pydantic import BaseModel

from bdi_api.settings import DBCredentials, Settings

settings = Settings()
db_credentials = DBCredentials()
BASE_URL = "https://samples.adsbexchange.com/readsb-hist/2023/11/01/"

s8 = APIRouter(
    responses={
        status.HTTP_404_NOT_FOUND: {"description": "Not found"},
        status.HTTP_422_UNPROCESSABLE_ENTITY: {"description": "Something is wrong with the request"},
    },
    prefix="/api/s8",
    tags=["s8"],
)


class AircraftReturn(BaseModel):
    # DO NOT MODIFY IT
    icao: str
    registration: Optional[str]
    type: Optional[str]
    owner: Optional[str]
    manufacturer: Optional[str]
    model: Optional[str]


class AircraftCO2(BaseModel):
    # DO NOT MODIFY IT
    icao: str
    hours_flown: float
    """Co2 tons generated"""
    co2: Optional[float]


# this sets up a connection to the database using the credentials from settings
def get_db_connection():
    return psycopg2.connect(
        dbname=db_credentials.dbname,
        user=db_credentials.user,
        password=db_credentials.password,
        host=db_credentials.host,
        port=db_credentials.port,
        cursor_factory=RealDictCursor,
    )


@s8.get("/aircraft/")
def list_aircraft(num_results: int = 100, page: int = 0) -> List[AircraftReturn]:
    """List all the available aircraft, its registration and type ordered by
    icao asc FROM THE DATABASE

    ADDITIONS:
    * Instead of passing a JSON, use pydantic to return the correct schema
    * Enrich it with information from the aircrafts database
      * `owner` (`ownop` field in the aircrafts DB)
      * `manufacturer` and `model`

    IMPORTANT: Only return the aircraft that we have seen and not the entire list in the aircrafts database
    """
    # let’s calculate the offset for pagination and grab the aircraft
    offset = page * num_results
    conn = None
    try:
        conn = get_db_connection()
        with conn.cursor() as cur:
            # I’m grabbing distinct aircraft from readsb_hist and joining with aircraft_db to get extra info
            query = """
            SELECT DISTINCT ON (rh.icao)
                rh.icao,
                ad.aircraft_type AS type,
                ad.registration,
                ad.ownop AS owner,
                ad.manufacturer,
                ad.model
            FROM readsb_hist rh
            LEFT JOIN aircraft_db ad ON rh.icao = ad.icao
            ORDER BY rh.icao ASC
            LIMIT %s OFFSET %s;
            """
            cur.execute(query, (num_results, offset))
            results = cur.fetchall()

            # Let’s map the results to our AircraftReturn model
            aircraft_list = []
            for row in results:
                aircraft_list.append(
                    AircraftReturn(
                        icao=row["icao"],
                        registration=row.get("registration"),
                        type=row.get("type"),
                        owner=row.get("owner"),
                        manufacturer=row.get("manufacturer"),
                        model=row.get("model"),
                    )
                )
            return aircraft_list

    except Exception as e:
        raise Exception(f"Database error: {e}")
    finally:
        if conn:
            conn.close()


@s8.get("/aircraft/{icao}/co2")
def get_aircraft_co2(icao: str, day: str) -> AircraftCO2:
    """Returns the CO2 generated by the aircraft **in a given day**.

    Compute the hours flown by the aircraft (assume each row we have is 5s).

    Then, you can use these metrics:
    fuel_used_kg = fuel_used_gal * 3.04
    c02_tons = (fuel_used_kg * 3.15) / 907.185

    Use the gallon per hour from the fuel_consumption table.
    If you don't have the fuel consumption rate, return `None` in the `co2` field.
    """
    # CO2 for this aircraft on the given day
    conn = None
    try:
        # gotta make sure the day is in the right format (YYYY-MM-DD)
        try:
            datetime.strptime(day, "%Y-%m-%d")
        except ValueError:
            raise ValueError("Invalid date format. Use YYYY-MM-DD.")

        conn = get_db_connection()
        with conn.cursor() as cur:
            query_flights = """
            SELECT COUNT(*) AS row_count
            FROM readsb_hist
            WHERE icao = %s AND date = %s;
            """
            cur.execute(query_flights, (icao.upper(), day))
            flight_data = cur.fetchone()
            row_count = flight_data["row_count"] if flight_data else 0

            total_seconds = row_count * 5
            hours_flown = total_seconds / 3600.0  # Seconds to hours

            query_fuel = """
            SELECT fc.fuel_rate
            FROM aircraft_db ad
            LEFT JOIN fuel_consumption fc ON ad.aircraft_type = fc.aircraft_type
            WHERE ad.icao = %s;
            """
            cur.execute(query_fuel, (icao.upper(),))
            fuel_data = cur.fetchone()
            fuel_rate_galph = fuel_data["fuel_rate"] if fuel_data and fuel_data["fuel_rate"] else None

            co2 = None
            if fuel_rate_galph is not None:
                fuel_used_gal = fuel_rate_galph * hours_flown
                fuel_used_kg = fuel_used_gal * 3.04
                co2 = (fuel_used_kg * 3.15) / 907.185

            return AircraftCO2(icao=icao, hours_flown=hours_flown, co2=co2)

    except Exception as e:
        raise Exception(f"Database error: {e}")
    finally:
        if conn:
            conn.close()
